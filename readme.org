# -*- mode: org -*-

#+EXPORT_FILE_NAME: ./README.md
#+OPTIONS: toc:nil
#+PROPERTY: mkdirp yes
#+STARTUP: content

* Order Placement System

** Overview

The ECi Order Placement system benefits buyers who purchase parts and supplies for
their customers as a part of their day-to-day business regardless of whether they
drop ship those items or stock them before distributing to their customers. The
Order Placement system empowers dealers by delivering real-time cost, cost
comparison, and current stocking levels from sellers. Because costs are provided
in real time, many of the problems of "invoice to purchase order matching" are
eliminated. Additionally, e-automate item prices can kept current.

The Order Placement system relieves the dealer of the labor intensive aspects of:
- Purchasing
- Receiving
- Invoice matching
- Maintaining up-to-date seller costs

A dealer who is fully utilizing the Order Placement system can have purchase orders:
- Automatically created and transmitted to the supplier.
- Automatically received along with an auto-created A/P voucher in advance of the invoice.

#+INCLUDE: "./overview.org"

** Resource Type Documentation

*** Health monitoring probes

Probe [[./probe/README.md][documentation]]

The purpose of a Probe is to allow buyer and seller health monitoring applications and staff to detect
problems before customers do and provide actionable information, allowing problems to be identified
and corrected as quickly as possible. It is expected that QA, IT, and Support health monitoring
systems and staff will have access to these probes and will access them multiple times throughout
the day.

*** Shipping Method

Shipping Method [[./shipping-method/README.md][documentation]]

A shipping method is the process by which the items on a purchase order are to be transported
(e.g., FedEx, UPS, USPS, Vendor’s Delivery Truck) from the seller to the buyer or consumer. Using
PO Processor, a shipping method may be selected for each order. In some cases, the seller may allow
the buyer to specify alternate ship methods for delivering parts and/or items on back order.

Related Help Topic: [[http://webhelp.e-automate.com/172/welcome.htm#PO_Processor/Submitting_Purchase_Orders.htm][Submitting Purchase Orders]]

*** Stock

**** TODO write non-technical description

Stock [[./stock/README.md][documentation]]

*** Order

**** TODO write non-technical description

Order [[./order/README.md][documentation]]

*** Invoice

**** TODO write non-technical description

Invoice [[./invoice/README.md][documentation]]

*** Shipping Receipts

**** TODO write non-technical description

Shipping Receipts [[./receipt/README.md][documentation]]

** Embedded Resource Types

*** Code

#+INCLUDE: "./other-schema/code.org"

*** Currency

#+INCLUDE: "./other-schema/currency.org"

*** Error

#+INCLUDE: "./other-schema/error.org"

*** Reference

#+INCLUDE: "./other-schema/reference.org"

** Testing

#+BEGIN_SRC shell :tangle ./test-json.sh :tangle-mode (identity #o755)
  #!/bin/bash
  #
  # brew install jsonlint
  # npm install jsonlint -g
  # npm install ajv -g
  # npm install ajv-cli -g
  #
#+END_SRC

** About this document

These documents were created using [[https://www.gnu.org/software/emacs/][emacs's]] org mode in a Literate Programming style with additional
support from packages such as babel, htmlize, graphviz, plantuml, etc. Emacs was hosted on macOS
High Sierra (10.13.3). Supporting libraries and applications were installed and updated using Homebrew.

#+BEGIN_SRC emacs-lisp :exports results
  (princ (concat (format "emacs version: %s\n" (emacs-version))
                 (format "org version: %s\n" (org-version))))
#+END_SRC

Embedded within this document are code fragments that are executed and do actual
work. As an example the next bit of code creates directories to hold images
generated by graphviz, plantuml, etc. as well as folders for schema documents and
source code required to test and demonstrate key concepts. Not all executing code
will be weaved or tangled but may execute "silently".

#+BEGIN_SRC emacs-lisp :exports both
  (progn (make-directory "./images" t)
         (make-directory "./rsrc-schema/src" t)
         (make-directory "./rsrc-schema/tst" t)
         (make-directory "./other-schema/src" t)
         (make-directory "./other-schema/tst" t))
#+END_SRC

*** Tangle

To tangle documents use the key binding *C-c C-v t*

*** Export

To export documents use the key binding *C-c C-e* and choose your preferred export format. For this
project I am using Markdown e.g. *C-c C-e m m*

** © 2018-2019 ECi Software Solutions, Inc. All rights reserved.
