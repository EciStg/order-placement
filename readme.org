# -*- mode: org -*-

#+EXPORT_FILE_NAME: ./README.md
#+PROPERTY: mkdirp yes

* The Order Placement System

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore
et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa
qui officia deserunt mollit anim id est laborum.

* Overview

#+INCLUDE: "./overview.org"

* Testing Schema files

** JSON

#+BEGIN_SRC shell :tangle ./test-json.sh :tangle-mode (identity #o755)

  #!/bin/bash
  #
  # brew install jsonlint
  # npm install jsonlint -g
  #

  #
  # make sure all of the files are well-formed JSON
  find ./rsrc-schema/tst ./rsrc-schema/src -type f -name '*.json' -exec jsonlint --quiet --compact {} \;

#+END_SRC

** XML

#+BEGIN_SRC shell :tangle ./test-xml.sh :tangle-mode (identity #o755)

  #!/bin/bash
  #
  # brew install xmllint

  # make sure all of the files are well-formed xml
  find ./rsrc-schema/src -type f -name '*.xsd' -exec xmllint --noout {} \;
  find ./rsrc-schema/tst -type f -name '*.xml' -exec xmllint --noout {} \;

#+END_SRC

* Probes

#+INCLUDE: "./probe.org"

* Stock

#+INCLUDE: "./stock.org"

* Invoice

#+INCLUDE: "./invoice.org"

* Order

#+INCLUDE: "./order.org"

* Ship Method

#+INCLUDE: "./ship-method.org"

* About this document
These documents wer created using [[https://www.gnu.org/software/emacs/][emacs's]] org mode in a Literate Programming style with additional
support from packages such as babel, htmlize, graphviz, plantuml, etc. Emacs was hosted on macOS
High Sierra (10.13.3). Supporting libraries and applications were installed and updated using Homebrew.

#+BEGIN_SRC emacs-lisp :exports results
  (princ (concat (format "emacs version: %s\n" (emacs-version))
                 (format "org version: %s\n" (org-version))))
#+END_SRC

Embedded within this document are code fragments that are executed and do actual
work. As an example the next bit of code creates directories to hold images
generated by graphviz, plantuml, etc. as well as folders for schema documents and
source code required to test and demonstrate key concepts. Not all executing code
will be weaved or tangled but may execute "silently".

#+BEGIN_SRC emacs-lisp :exports both
  (progn (make-directory "./images" t)
         (make-directory "./rsrc-schema/src" t)
         (make-directory "./rsrc-schema/tst" t))
#+END_SRC

** Tangle

To tangle documents use the key binding *C-c C-v t*

** Export

To export documents use the key binding *C-c C-e* and choose your preferred export format. For this
project I am using Markdown e.g. *C-c C-e m m*
* Resource Schemas
** TODO
* Test Results

#+BEGIN_SRC shell :exports both :results verbatim
  ./test-json.sh 2>&1
#+END_SRC
