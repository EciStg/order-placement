# -*- mode: org -*-

#+EXPORT_FILE_NAME: ./README.md
#+OPTIONS: toc:nil
#+PROPERTY: mkdirp yes
#+STARTUP: content

* Order Placement System

** Overview

*** TODO write non-technical description

#+INCLUDE: "./overview.org"

** Endpoint Major Resource Types

*** Probe

**** TODO write non-technical description

Probe [[./probe/README.md][documentation]]

*** Shipping Method

**** TODO write non-technical description

Ship Method [[./ship-method/README.md][documentation]]

*** Stock

**** TODO write non-technical description

Stock [[./stock/README.md][documentation]]

*** Order

**** TODO write non-technical description

Order [[./order/README.md][documentation]]

*** Invoice

**** TODO write non-technical description

Invoice [[./invoice/README.md][documentation]]

*** Shipping Receipts

**** TODO write non-technical description

Shipping Receipts [[./receipt/README.md][documentation]]

** Other (embedded) Resource Types

*** Code

#+INCLUDE: "./other-schema/code.org"

*** Currency

#+INCLUDE: "./other-schema/currency.org"

*** Error

#+INCLUDE: "./other-schema/error.org"

*** Reference

#+INCLUDE: "./other-schema/reference.org"

** Testing

#+BEGIN_SRC shell :tangle ./test-json.sh :tangle-mode (identity #o755)
  #!/bin/bash
  #
  # brew install jsonlint
  # npm install jsonlint -g
  # npm install ajv -g
  # npm install ajv-cli -g
  #
#+END_SRC

** About this document

These documents were created using [[https://www.gnu.org/software/emacs/][emacs's]] org mode in a Literate Programming style with additional
support from packages such as babel, htmlize, graphviz, plantuml, etc. Emacs was hosted on macOS
High Sierra (10.13.3). Supporting libraries and applications were installed and updated using Homebrew.

#+BEGIN_SRC emacs-lisp :exports results
  (princ (concat (format "emacs version: %s\n" (emacs-version))
                 (format "org version: %s\n" (org-version))))
#+END_SRC

Embedded within this document are code fragments that are executed and do actual
work. As an example the next bit of code creates directories to hold images
generated by graphviz, plantuml, etc. as well as folders for schema documents and
source code required to test and demonstrate key concepts. Not all executing code
will be weaved or tangled but may execute "silently".

#+BEGIN_SRC emacs-lisp :exports both
  (progn (make-directory "./images" t)
         (make-directory "./rsrc-schema/src" t)
         (make-directory "./rsrc-schema/tst" t)
         (make-directory "./other-schema/src" t)
         (make-directory "./other-schema/tst" t))
#+END_SRC

*** Tangle

To tangle documents use the key binding *C-c C-v t*

*** Export

To export documents use the key binding *C-c C-e* and choose your preferred export format. For this
project I am using Markdown e.g. *C-c C-e m m*

** Â© 2018 ECi Software Solutions, Inc. All rights reserved.
