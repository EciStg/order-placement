# -*- mode: org -*-

#+PROPERTY: mkdirp yes

* TODO Provide a non-technical overview of the business cases.

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore
et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum
dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui
officia deserunt mollit anim id est laborum.

* Sequence of Events

#+BEGIN_SRC plantuml :file ./images/stock-sequence.puml.png :exports results
@startuml stock-sequence.png
Buyer -> Seller: [ POST ] stock
Seller -> Buyer: stock<U+0394> | error
@enduml
#+END_SRC

In the following section, Use Cases, examples of data ( ~--data~ ) to be sent and
received will be shown. It is assumed that the caller will make the actual /POST/
call with the required headers e.g.

#+BEGIN_SRC shell
  curl --request POST \
       --header "Content-Type: application/vnd.eci.stg.stock.1.0.0.xml" \
       --user user123:password123 \
       --url http://vendor-host/vendor-stock-endpoint
       --data ''
#+END_SRC

* Versions

** Version 1.0

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

** Version 2.0

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

* Use Cases

** As an unidentified buyer I would like to see the cost for one or more products

Version 1.0

*** Request

In this example a buyer is asking for her cost, the seller's asking price, for a product known to the
seller as /abc-123/.

**** JSON
#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-cost-request.json
  { "items": [{ "sellerRef": "abc-123" }]}
#+END_SRC

**** XML
#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-cost-request.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
    </item>
  </items>
#+END_SRC

*** Response

The seller's response is intended to inform the buyer that the the item will cost her /99.99$USD/.

**** JSON
#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-cost-response.json
  { "items": [{ "sellerRef": "abc-123", "unitCost": 99.99}]}
#+END_SRC

**** XML
#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-cost-responses.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <unitCost>99.99</unitCost>
    </item>
  </items>
#+END_SRC

** As an unidentified buyer I would like to know if the seller has enough stock to satisfy my order

Version 1.0

In this case the buyer's intent is to understand if the seller an supply the requested number of
items ( /24/ ) for a product known to the seller as /abc-123/.

*** Request
**** JSON

#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-request.json
  { "items": [{ "sellerRef": "abc-123", "quantity": 24}]}
#+END_SRC

**** XML

#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-request.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <quantity>24</quantity>
    </item>
  </items>
#+END_SRC

*** Response
**** If the seller can deliver the buyer's requested quantity ( /24/ ) the seller may reply with

***** the requested quantity ( /24/ )

****** JSON
#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-a.json
  { "items": [{ "sellerRef": "abc-123", "quantity": 24}]}
#+END_SRC

****** XML
#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-a.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <quantity>24</quantity>
    </item>
  </items>
#+END_SRC

***** the quantity on hand ( /103/ )

****** JSON

#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-b.json
  { "items": [{ "sellerRef": "abc-123", "quantity": 103}]}
#+END_SRC

****** XML
#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-b.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <quantity>103</quantity>
    </item>
  </items>
#+END_SRC

***** a fixed value e.g. /1,000/.

****** JSON
#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-c.json
  { "items": [{ "sellerRef": "abc-123", "quantity": 1000}]}
#+END_SRC

****** XML
#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-c.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <quantity>1000</quantity>
    </item>
  </items>
#+END_SRC

**** If the seller cannot deliver the buyer's requested quantity ( /24/ ) the seller may reply with

***** the quantity on hand ( /12/ ).

****** JSON

#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-d.json
  { "items": [{ "sellerRef": "abc-123", "quantity": 12}]}
#+END_SRC

****** XML
#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-d.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <quantity>12</quantity>
    </item>
  </items>
#+END_SRC

***** a fixed value e.g. /0/.

****** JSON

#+BEGIN_SRC json :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-e.json
  { "items": [{ "sellerRef": "abc-123", "quantity": 0}]}
#+END_SRC

****** XML

#+BEGIN_SRC xml :tangle ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0-quantity-response-e.xml
  <items>
    <item>
      <sellerRef>abc-123</sellerRef>
      <quantity>0</quantity>
    </item>
  </items>
#+END_SRC

** As an unidentified buyer I would like to be able to specify a date when the order must be received.

Version 2.0

In this example the buyer is providing the current date ( 24 April 2008 ) and the date
when they would expect the order to be delivered ( 24 April 2008 ).

#+BEGIN_SRC json
  { "count": 1,
    "date" : "2018-04-24T17:00:00.000Z",
    "dateExpected" : "2018-04-26T17:00:00.000Z",
    "items": [
      { "line": 1,
        "item": { "sellerRef": "abc-123" }}]}
#+END_SRC

In this example the buyer is providing the current date ( 24 April 2008 ) and the date
when they would expect one of the line items in the order to be delivered ( 24 April 2008 ).

#+BEGIN_SRC json
  { "count": 1,
    "items": [
      { "line": 1,
        "item": { "sellerRef": "abc-123",
                  "date" : "2018-04-24T17:00:00.000Z",
                  "dateExpected" : "2018-04-26T17:00:00.000Z"}}]}
#+END_SRC

*** If the seller does not support this feature the reply can omit dateExpected

#+BEGIN_SRC json
  { "count": 1,
    "date" : "2018-04-24T17:00:00.000Z",
    "items": [
      { "line": 1,
        "item": { "sellerRef": "abc-123" }}]}
#+END_SRC

*** If the seller supports this feature the reply should contain a date the buyer can expect the item to be delivered

In this example the seller is telling the buyer they can expect deliver on 30 April 2008

#+BEGIN_SRC json
  { "count": 1,
    "date" : "2018-04-24T17:00:00.000Z",
    "dateExpected" : "2018-04-30T17:00:00.000Z",
    "items": [
      { "line": 1,
        "item": { "sellerRef": "abc-123" }}]}
#+END_SRC

** As a seller I would like to be able to provide a replacement item when the seller specifies an outdated item number

Version 2.0

*** TODO

** As a seller I would like to be able to provide a substitue when the item specified by the buyer is not in stock

Version 2.0

*** TODO

* Resource Schemas

** Version 1.0

*** Stock

**** JSON

#+BEGIN_SRC json :tangle ./rsrc-schema/src/vnd.eci.stg.stock.1.0.0.json
  {
    "id": "./vnd.eci.stg.stock.1.0.0.json",
    "title": "Stock, Cost, Date Collection",
    "description": "a collection items a buyer may purchase from a seller",
    "type": "object",
    "properties" : {

      "items": {
        "description": "the unique items that have or will have stock and cost information",
        "type": "array",
        "minItems": 1,
        "maxItems": 1000,
        "uniqueItems": true,
        "items" : {
          "$ref" : "#/definitions/item"
        }
      }
    },

    "additionalProperties": false,

    "definitions" : {
      "item": {
        "title": "Stock, Cost, Date Item",
        "description": "describes the items a buyer would like to purchase from a seller.",
        "type": "object",
        "properties" : {

          "sellerRef": {
            "description": "seller function identifying a unique seller owned resource",
            "type": "string",
            "minLength": 1,
            "maxLength": 32
          },

          "quantity": {
            "description": "the number of individual units in the measure e.g. Box of 20",
            "type": "number",
            "minimum" : 1,
            "maximum" : 999999999.999999
          },

          "unitCost": {
            "description": "",
            "type": "number",
            "minimum" : 0,
            "maximum" : 999999999999.999999
          }
        },

        "additionalProperties": false
      }
    }
  }
#+END_SRC

**** XML

#+BEGIN_SRC xml :tangle ./rsrc-schema/src/vnd.eci.stg.stock.1.0.0.xsd
  <?xml version='1.0' encoding='utf-8'?>

  <xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'
             elementFormDefault='qualified'
             xml:lang='en'>

    <xs:element name='items'>
      <xs:complexType>
        <xs:sequence minOccurs='1' maxOccurs='1000'>
          <xs:element name='item' type='StockItemType'/>
        </xs:sequence>
      </xs:complexType>
    </xs:element>

    <xs:complexType name='StockItemType'>
      <xs:sequence>
        <xs:annotation>
          <xs:documentation>
            The set of returned products must not contain duplicate products (that
            is the nature of sets), and products, by defition, must have a unique
            ID. Currently we do not place a restriction on the number of products
            that can be requested at one time, but we should probably do that soon
            to protect both ECi and the Vendor.
          </xs:documentation>
        </xs:annotation>
        <xs:element name='sellerRef' type='IDType' minOccurs='0' maxOccurs='1'/>
        <xs:element name='quantity' type='QuantityType' minOccurs='0' maxOccurs='1'/>
        <xs:element name='unitCost' type='CostType' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
    </xs:complexType>

    <xs:simpleType name='CostType'>
      <xs:annotation>
        <xs:documentation>
          Every Product must have a unit cost that is equal to or greater than
          0 and must cost just under one trillion monetary units. Version 1.0.0
          assumes the monetary unit is US Dollars.
        </xs:documentation>
      </xs:annotation>
      <xs:restriction base='xs:decimal'>
        <xs:minInclusive value='0'/>
        <xs:maxInclusive value='999999999999.999999'/>
        <xs:fractionDigits value='6'/>
        <xs:totalDigits value='18'/>
      </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name='IDType'>
      <xs:annotation>
        <xs:documentation>
          Every Product must have at least one ID and that ID must uniquely locate
          only one product; a Product may have more than one ID but a ID must relate
          to only a single product.
        </xs:documentation>
      </xs:annotation>
      <xs:restriction base='xs:token'>
        <xs:minLength value='1'/>
        <xs:maxLength value='32'/>
      </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name='QuantityType'>
      <xs:restriction base='xs:unsignedInt'/>
    </xs:simpleType>

  </xs:schema>

#+END_SRC


** Version 2.0

*** Stock

**** TODO

#+BEGIN_SRC json :exports none :tangle ./rsrc-schema/src/vnd.eci.stg.stock.2.0.0.json
{
  "id": "./vnd.eci.stg.stock.2.0.0.json",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "title": "Stock, Cost, Date Collection",
  "description": "a collection items a buyer may purchase from a seller",
  "type": "object",
  "properties" : {

    "count": {
      "description": "total number of items in the collection",
      "type": "integer",
      "minimum": 1,
      "maximum": 1000
    },

   "description": {
      "description": "human facing text describing the stock and cost collection",
      "type": "string",
      "minLength": 1,
      "maxLength": 128
    },

    "items": {
      "description": "the unique items that have or will have stock and cost information",
      "type": "array",
      "minItems": 1,
      "maxItems": 1000,
      "uniqueItems": true,
      "items" : {
        "$ref" : "./vnd.eci.stg.stock-item.0.0.2.json"
      }
    },

    "remarks": {
      "description": "human to human information",
      "type": "string",
      "minLength": 1,
      "maxLength": 256
    },

    "collectionRef": {
      "description": "foreign system identification of a unique stock and cost quote",
      "$ref": "./vnd.eci.stg.reference.0.0.1.json"
    },

    "date": {
      "description": "origination date of the stock collection",
      "type" : "string",
      "format": "date-time"
    },

    "dateExpected": {
      "description": "date when the stock will be provided at cost",
      "type" : "string",
      "format": "date-time"
    },

    "buyer": {
      "description": "buyer",
      "$ref": "./vnd.eci.stg.buyer.0.0.1.json"
    },

    "seller": {
      "description": "seller",
      "$ref": "./vnd.eci.stg.seller.0.0.1.json"
    },

    "consumer": {
      "description": "consumer",
      "$ref": "./vnd.eci.stg.consumer.0.0.1.json"
    },

    "currency": {
      "description": "currency",
      "$ref": "./vnd.eci.stg.currency.0.0.1.json"
    }
  },

  "additionalProperties": false,

  "definitions" : {
    "itemReplacements": {
      "allOf": [ { "$ref": "./vnd.eci.stg.stock-item.0.0.2.json" } ]
    },

    "itemSubstitutes": {
      "allOf": [ { "$ref": "./vnd.eci.stg.stock-item.0.0.2.json" } ]
    }
  }
}
#+END_SRC

*** Stock Item

**** TODO

#+BEGIN_SRC json :exports none :tangle ./rsrc-schema/src/vnd.eci.stg.stock-item.2.0.0.json
{
  "id": "./vnd.eci.stg.stock-item.2.0.0.json",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "title": "Stock, Cost, Date Item",
  "description": "describes the items a buyer would like to purchase from a seller.",
  "type": "object",
  "properties" : {

    "line": {
      "description": "",
      "type": "integer",
      "minimum" : 1,
      "maximum" : 500
    },

    "date": {
      "description": "date and time when the count was recorded",
      "type": "string",
      "format": "date-time"
    },

    "dateExpected": {
      "description": "",
      "type": "string",
      "format": "date-time"
    },

    "description": {
      "description": "human facing text describing the item",
      "type": "string",
      "minLength": 1,
      "maxLength": 128
    },

    "item": {
      "description": "foreign system identification of a unique item",
      "$ref": "./vnd.eci.stg.reference.0.0.1.json"
    },

    "quantity": {
      "description": "the number of individual units in the measure e.g. Box of 20",
      "type": "number",
      "minimum" : 1,
      "maximum" : 999999999.999999
    },

    "make": {
      "description": "",
      "type": "string",
      "minLength": 1,
      "maxLength": 32
    },

    "model": {
      "description": "",
      "type": "string",
      "minLength": 1,
      "maxLength": 32
    },

    "serialnumber": {
      "description": "",
      "type": "string",
      "minLength": 1,
      "maxLength": 32
    },

    "unitMeasure": {
      "description": "unit measure of the item",
      "$ref": "./vnd.eci.stg.unit-measure.0.0.1.json"
    },

    "remarks": {
      "description": "human to human information",
      "type": "string",
      "minLength": 1,
      "maxLength": 256
    },

    "barcode": {
      "description": "when delivered as output from the system this represents all known barcodes associated with id.buyerAssignedID. When submitted to the system as input the value represents one or more barcodes scanned by the scanning agent to determine the physical object's identity within the system.",
      "type": "array",
      "maxItems": 50,
      "items": [{
        "$ref" : "./vnd.eci.stg.barcode.0.0.1.json"
      }]
    },

    "location": {
      "description": "location of the item",
      "$ref": "./vnd.eci.stg.address.0.0.1.json"
    },

    "unitCost": {
      "description": "",
      "type": "number",
      "minimum" : 0,
      "maximum" : 999999999999.999999
    }
  },

  "additionalProperties": false
}
#+END_SRC
* Testing

#+BEGIN_SRC shell :exports both :results verbatim
  ./test-json.sh 2>&1
  ./test-xml.sh 2>&1
  xmllint --noout --schema ./rsrc-schema/src/vnd.eci.stg.stock.1.0.0.xsd ./rsrc-schema/tst/vnd.eci.stg.stock.1.0.0*.xml
#+END_SRC

#+RESULTS:
