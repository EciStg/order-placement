# -*- mode: org -*-

#+EXPORT_FILE_NAME: ./README.md
#+OPTIONS: toc:nil
#+PROPERTY: mkdirp yes
#+STARTUP: content

* Stock

** Test Results

#+BEGIN_SRC shell :exports both :results table replace
  echo $(date -u +"%Y-%m-%dT%H:%M:%SZ") started
  xmllint --noout --schema ../rsrc-schema/src/vnd.eci.stg.stock.1.5.0.xsd ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0*.xml 2>&1
  ajv -s ../rsrc-schema/src/vnd.eci.stg.stock.1.5.0.json -d "../rsrc-schema/tst/vnd.eci.stg.stock*.json" 2>&1
  echo $(date -u +"%Y-%m-%dT%H:%M:%SZ") stopped

#+END_SRC

** Overview

Lorem ipsum dolor sit amet, sea ad clita sadipscing, mea id antiopam prodesset. Justo scripta vivendum eum id, in vis essent petentium. Qui mutat tritani epicuri et, utamur percipitur an sea. Ad nullam integre eum. Cu atqui inermis pri, tempor causae sanctus at pro. Ea cum tation hendrerit conclusionemque, veri hendrerit definitionem sit at. Vix adipiscing dissentiet eloquentiam eu, decore epicurei liberavisse eu eam.

#+BEGIN_SRC plantuml :file ../images/stock-sequence.puml.png :exports results
@startuml stock-sequence.png
Buyer -> Seller: [ POST ] stock
Seller -> Buyer: stock<U+0394> | error
@enduml
#+END_SRC

In the following section, Use Cases, examples of data ( ~--data~ ) to be sent and
received will be shown. It is assumed that the caller will make the actual /POST/
call with the required headers e.g.

#+BEGIN_SRC shell
  curl --request POST \
       --header "Content-Type: application/vnd.eci.stg.stock.1.5.0.json; charset=utf-8" \
       --user user123:password123 \
       --url http://vendor-host/vendor-stock-endpoint
       --data ''
#+END_SRC

** Use Cases

There are many use cases, most of the variation is contained in the seller's response. Therefore we
will assume that that buyer request will be one of the next two use cases and will now show the
buyer's request unless it differs from these two. When we do show the buyer's request, for clarity,
we will show it as an unknown buyer.

The stock check system supports requests from buyers are not known to the seller and from buyers that
are known to the seller. Sellers may, or may not, allow unknown buyers to request stock information.
If unknown buyer requests are not supported that seller's system should return a 4xx http status code
and an optional error body.

*** As a buyer not known to the seller I would like to submit stock requests

The buyer system simply lists the items they wish to inquire about. In this example, the buyer wants
to get information about an item in the seller's system identified as ~abc-123~.

**** Request

***** JSON
#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-unknown-buyer-request.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-unknown-buyer-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

*** As a buyer known to the seller I would like to submit stock requests

The buyer must populate and send information that will uniquely identify them to the seller. In this
example the buyer has provided the seller assigned unique identifier ~buyer-abc~ in code property of
the buyer object. After that, the request is the same as the unknown buyer.

**** Request

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-known-buyer-request.json
  { "buyer" : { "reference": { "code": "buyer-abc",
                               "type": "seller" }},
    "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-known-buyer-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <buyer>
      <reference>
        <code>buyer-abc</code>
        <type>seller</type>
      </reference>
    </buyer>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

*** As a buyer I would like to see the cost for one or more items

**** Response

The seller's response is intended to inform the buyer that the item will cost her /99.99$USD/.

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-cost-response.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "unitCost": 99.99}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-cost-response.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <unitCost>99.99</unitCost>
      </item>
    </items>
  </stock>
#+END_SRC

*** As a known buyer, with a known customer, I would like to know the cost for one or more items

In these examples, the response is no different any other cost request. The request contains
information about the buyer and the buyer's customer. Here we are just providing the value
~consumer-xyz~, which should be the unique id by which the seller's system will recognize the
buyer's customer.

**** Request

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-known-consumer-request.json
  { "buyer" : { "reference": { "code": "buyer-abc",
                               "type": "seller" }},
    "consumer" : { "reference": { "code": "consumer-xyz",
                                  "type": "seller" }},
    "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-known-consumer-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <buyer>
      <reference>
        <code>buyer-abc</code>
        <type>seller</type>
      </reference>
    </buyer>
    <consumer>
      <reference>
        <code>consumer-xyz</code>
        <type>seller</type>
      </reference>
    </consumer>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

*** As a known buyer, with a known customer contract, I would like to know the cost for one or more items

In these examples, the response is no different any other cost request. The request contains
information about the buyer and the buyer's customer. Here we are just providing the value
~consumer-xyz~, which should be the unique id by which the seller's system will recognize the
buyer's customer's contract ~contract-789~.

**** Request

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-known-consumer-contract-request.json
      { "buyer" : { "reference": { "code": "buyer-abc",
                                   "type": "seller" }},
        "consumer" : { "reference": { "code": "consumer-xyz",
                                      "type": "seller" },
                       "contract" : { "code": "contract-789",
                                      "type": "seller" }},
        "itemsCount": 1,
        "items": [{ "reference": { "code": "abc-123",
                                   "type": "seller" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-known-consumer-contract-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <buyer>
      <reference>
        <code>buyer-abc</code>
        <type>seller</type>
      </reference>
    </buyer>
    <consumer>
      <reference>
        <code>consumer-xyz</code>
        <type>seller</type>
      </reference>
      <contract>
        <code>contract-789</code>
        <type>seller</type>
      </contract>
    </consumer>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

*** As a buyer I would like to know if the seller has enough stock to satisfy my order

**** Version 1.5

The buyer systems will not send the expected quantity, quantity will be omitted or unspecified.

**** Version 2.0

In this case the buyer's intent is to understand if the seller an supply the requested number of
items ( /24/ ) for a product known to the seller as /abc-123/.

***** Request

****** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-request.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "quantity": 24}]}
#+END_SRC

****** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <quantity>24</quantity>
      </item>
    </items>
  </stock>
#+END_SRC

***** Response

****** If the seller can deliver the buyer's requested quantity ( /24/ ) the seller may reply with

******* the requested quantity ( /24/ )

******** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-a.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "quantity": 24}]}
#+END_SRC

******** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-a.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <quantity>24</quantity>
      </item>
    </items>
  </stock>
#+END_SRC

******* the quantity on hand ( /103/ )

******** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-b.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "quantity": 103}]}
#+END_SRC

******** XML
#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-b.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <quantity>103</quantity>
      </item>
    </items>
  </stock>
#+END_SRC

******* a fixed value e.g. /1,000/

******** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-c.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "quantity": 1000}]}
#+END_SRC

******** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-c.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <quantity>1000</quantity>
      </item>
    </items>
  </stock>
#+END_SRC

****** If the seller cannot deliver the buyer's requested quantity ( /24/ ) the seller may reply with

******* the quantity on hand ( /12/ )

******** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-d.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "quantity": 12}]}
#+END_SRC

******** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-d.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <quantity>12</quantity>
      </item>
    </items>
  </stock>
#+END_SRC

******* a fixed value e.g. /0/

******** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-e.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "quantity": 0}]}
#+END_SRC

******** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-quantity-response-e.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <quantity>0</quantity>
      </item>
    </items>
  </stock>
#+END_SRC

*** As a buyer I would like to know which location items will be shipped from

This use case is supported in the current PO Processor, but as we look more closely, we do think it
is a valid use case. In fact, we have had some sellers express a concern that this might set an
expectation that buyers can order stock from a specific warehouse, which they cannot do. We asked our
head of training about providing the warehouse, this was his reply:

#+BEGIN_QUOTE
The customers that I have worked with had said they "like" knowing the warehouse. When I pushed them
as to why, they really liked knowing because they knew the expected delivery time. It was not the
warehouse that was the key, it was knowing when they could expect to deliver. I agree that they really
don’t need to know the warehouse, they need to know if they can get the order to a certain location,
for the money, in an estimated time frame.
#+END_QUOTE

So while we support this use case to be compatible with older seller implementations and with the
current version of PO Processor, we expect to deprecate it very soon. We have added additional use
cases to support time to delivery with an estimated cost for shipping.

**** Sellers may respond with a name that is meaningful to the dealer

In this example, the seller is responding with ~Main Warehouse~

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-location-response-a.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "location": { "name": "Main Warehouse" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-location-response-a.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <location>
          <name>Main Warehouse</name>
        </location>
      </item>
    </items>
  </stock>
#+END_SRC

**** Sellers may respond with city, and region (or some other meaningful part of the address)

In this example, the seller is providing the city and state ~Dallas, TX~

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-location-response-b.json
  { "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "location": { "city": "Dallas",
                              "region": "TX" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-location-response-b.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <location>
          <city>Dallas</city>
          <region>TX</region>
        </location>
      </item>
    </items>
  </stock>
#+END_SRC
*** As a buyer I would like to know the earliest date the order could be received

**** Request

In this example the buyer is providing the date of the stock request ~24 April 2018~ and the date
when they would expect the order to be delivered ~26 April 2018~.

Buyers will not always provide the expected date in the request. In these cases the seller can decide
if they want to always provide the expected delivery date or only when explicitly asked.

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-request.json
  { "when" : "2018-04-24T17:00:00.000Z",
    "whenExpected" : "2018-04-26T17:00:00.000Z",
    "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <when>2018-04-24T17:00:00.000Z</when>
    <whenExpected>2018-04-26T17:00:00.000Z</whenExpected>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

**** Response

***** The seller can provide the expected date for the entire order

In this example the seller is providing the date of the stock response ~24 April 2018~ and the date
when the order could be delivered ~26 April 2018~.

****** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-response-a.json
  { "when" : "2018-04-24T17:00:00.000Z",
    "whenExpected" : "2018-04-26T17:00:00.000Z",
    "itemsCount": 1,
    "items": [ { "reference": { "code": "abc-123" }}]}
#+END_SRC

****** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-response-a.xml
  <stock>
    <when>2018-04-24T17:00:00.000Z</when>
    <whenExpected>2018-04-26T17:00:00.000Z</whenExpected>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

***** The seller can provide the expected dates for individual line items

In this example the seller can provide item ~abc-123~ on ~24 April~ and provide item ~def-456~ on ~30 April~.

****** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-response-b.json
  { "itemsCount": 2,
    "items": [ { "reference": { "code": "abc-123" },
                 "when" : "2018-04-24T17:00:00.000Z",
                 "whenExpected" : "2018-04-26T17:00:00.000Z"},
               { "reference": { "code": "def-456" },
                 "when" : "2018-04-24T17:00:00.000Z",
                 "whenExpected" : "2018-04-30T17:00:00.000Z"}]}
#+END_SRC

****** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-response-b.xml
  <stock>
    <itemsCount>2</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <when>2018-04-24T17:00:00.000Z</when>
        <whenExpected>2018-04-26T17:00:00.000Z</whenExpected>
      </item>
      <item>
        <reference>
          <code>def-456</code>
          <type>seller</type>
        </reference>
        <when>2018-04-24T17:00:00.000Z</when>
        <whenExpected>2018-04-30T17:00:00.000Z</whenExpected>
      </item>
    </items>
  </stock>
#+END_SRC

***** When the seller does not support this feature omit the property called ~whenExpected~ in the response

****** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-response-c.json
  { "when" : "2018-04-24T17:00:00.000Z",
    "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" }}]}
#+END_SRC

****** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-when-expected-response-c.xml
    <stock>
      <when>2018-04-24T17:00:00.000Z</when>
      <itemsCount>1</itemsCount>
      <items>
        <item>
          <reference>
            <code>abc-123</code>
            <type>seller</type>
          </reference>
        </item>
      </items>
    </stock>
#+END_SRC
*** As a buyer I would like to know the cost to have an order delivered to a specific location

**** Request

In this example the buyer would like to know what the cost will be to have the order delivered to the
following address:

#+BEGIN_EXAMPLE
Jane Doe
ECi Solutions, STG
Suite #200
4626 N 300 W
Provo, UT 84606
#+END_EXAMPLE

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-shipping-cost-request.json
  { "shipTo" : { "location": { "mtn": "Jane Doe",
                               "rcp": "ECi Solutions, STG",
                               "alt": "Suite #200",
                               "dal": "4626 N 300 W",
                               "city": "Provo",
                               "region": "UT",
                               "postalCode": "84604"},
                 "email": "shipping-contact@example.com",
                 "phone": "1-555-555-5555"},
    "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" }}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-shipping-cost-request.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <shipTo>
      <location>
        <mtn>Jane Doe</mtn>
        <rcp>ECi Solutions, STG</rcp>
        <alt>Suite #200</alt>
        <dal>4626 N 300 W</dal>
        <city>Provo</city>
        <region>UT</region>
        <postalCode>84604</postalCode>
      </location>
      <email>shipping-contact@example.com</email>
      <phone>1-555-555-5555></phone>
    </shipTo>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
      </item>
    </items>
  </stock>
#+END_SRC

**** Response

The seller's response is intended to inform the buyer that shipping the order will cost /199.99$USD/.

***** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-shipping-cost-response.json
  { "freight": 199.99,
    "itemsCount": 1,
    "items": [{ "reference": { "code": "abc-123",
                               "type": "seller" },
                "unitCost": 99.99}]}
#+END_SRC

***** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/tst/vnd.eci.stg.stock.1.5.0-shipping-cost-response.xml
  <?xml version='1.0' encoding='utf-8'?>

  <stock>
    <freight>199.99</freight>
    <itemsCount>1</itemsCount>
    <items>
      <item>
        <reference>
          <code>abc-123</code>
          <type>seller</type>
        </reference>
        <unitCost>99.99</unitCost>
      </item>
    </items>
  </stock>
#+END_SRC
*** As a seller I would like to be able to provide a replacement item when the seller specifies an outdated item number

Version 2.0

**** TODO

*** As a seller I would like to be able to provide a substitute when the item specified by the buyer is not in stock

Version 2.0

**** TODO

** Resource Schemas

*** Version 1.0

No longer published

*** Version 1.5

**** JSON

#+BEGIN_SRC json :tangle ../rsrc-schema/src/vnd.eci.stg.stock.1.5.0.json
      {
        "id": "./vnd.eci.stg.stock.1.5.0.json",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Stock",
        "description": "",
        "type": "object",
        "additionalProperties": false,
        "properties": {

          "reference": { "$ref": "#/definitions/reference" },

          "name": {
            "description": "",
            "type": "string",
            "minLength": 1,
            "maxLength": 32
          },

          "description": {
            "description": "",
            "type": "string",
            "minLength": 1,
            "maxLength" : 128
          },

          "remarks": {
            "description": "",
            "type": "string",
            "minLength": 1,
            "maxLength" : 256
          },

          "buyer": { "$ref": "#/definitions/buyer" },

          "consumer": { "$ref": "#/definitions/consumer" },

          "shipTo": { "$ref": "#/definitions/shipTo" },

          "location": { "$ref": "#/definitions/address" },

          "quantity": {
            "description": "",
            "type": "number",
            "minimum" : 0,
            "maximum" : 999999999.999999
          },

          "unitCost": {
            "description": "",
            "type": "number",
            "minimum" : 0,
            "maximum" : 999999999999.999999
          },

          "freight": {
            "description": "",
            "type": "number",
            "minimum" : 0,
            "maximum" : 999999999999.999999
          },

          "when": {
            "description": "",
            "type" : "string",
            "format": "date-time"
          },

          "whenExpected": {
            "description": "",
            "type" : "string",
            "format": "date-time"
          },

          "itemsCount": {
            "description": "number of things in the items collection",
            "type" : "number",
            "minimum": 1,
            "maximum": 1000
          },

          "items": {
            "description": "",
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "uniqueItems": true,
            "items" : {
              "$ref" : "#"
            }
          }
        },

        "definitions" : {
          "referenceType": {
            "type": "string",
            "enum": ["buyer", "consume", "manufacturer", "seller" ]
          },

          "reference": {
            "type": "object",
            "additionalProperties": false,
            "properties" : {

              "code": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "name": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "description": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 128
              },

              "remarks": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 256
              },

              "type": { "$ref": "#/definitions/referenceType" },

              "itemsCount": {
                "description": "number of things in the items collection",
                "type" : "number",
                "minimum": 1,
                "maximum": 1000
              },

              "items": {
                "description": "",
                "type": "array",
                "minItems": 1,
                "maxItems": 1000,
                "uniqueItems": true,
                "items" : {
                  "$ref" : "#/definitions/reference"
                }
              }
            }
          },

          "address": {
            "type": "object",
            "additionalProperties": false,
            "properties" : {

              "reference": { "$ref": "#/definitions/reference" },

              "name": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "description": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 128
              },

              "remarks": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 256
              },

              "msc": {
                "description": "mail stop code",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "mtn": {
                "description": "attention line",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "rcp": {
                "description": "recipient or business name",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "alt": {
                "description": "alternate location",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "dal": {
                "description": "delivery address line",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "city": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "region": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "postalCode": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "country": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "binLocation": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 40
              },

              "warehouse": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 128
              }
            }
          },

          "buyer": {
            "type": "object",
            "additionalProperties": false,
            "properties" : {

              "reference": { "$ref": "#/definitions/reference" },

              "name": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "description": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 128
              },

              "remarks": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 256
              },

              "location": { "$ref": "#/definitions/address" },

              "email": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },

              "phone": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "taxID": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              }
            }
          },

          "consumer": {
            "type": "object",
            "additionalProperties": false,
            "properties" : {

              "reference": { "$ref": "#/definitions/reference" },

              "name": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "description": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 128
              },

              "remarks": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 256
              },

              "location": { "$ref": "#/definitions/address" },

              "contract": { "$ref": "#/definitions/reference" },

              "email": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },

              "phone": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "taxID": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              }
            }
          },

          "shipTo": {
            "type": "object",
            "additionalProperties": false,
            "properties" : {

              "reference": { "$ref": "#/definitions/reference" },

              "name": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              },

              "description": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 128
              },

              "remarks": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength" : 256
              },

              "location": { "$ref": "#/definitions/address" },

              "email": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 256
              },

              "phone": {
                "description": "",
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              }
            }
          }
        }
      }
#+END_SRC

**** XML

#+BEGIN_SRC xml :tangle ../rsrc-schema/src/vnd.eci.stg.stock.1.5.0.xsd
    <?xml version='1.0' encoding='utf-8'?>

    <xs:schema xmlns:xs='http://www.w3.org/2001/XMLSchema'
               elementFormDefault='qualified'
               xml:lang='en'>

      <xs:element name='stock' type='StockType'/>

      <xs:complexType name='AddressType'>
        <xs:sequence>
          <xs:element name='reference'   type='ReferenceType' minOccurs='0' maxOccurs='1' />
          <xs:element name='name'        type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='description' type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'     type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='msc'         type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='mtn'         type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='rcp'         type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='alt'         type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='dal'         type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='city'        type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='region'      type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='postalCode'  type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='country'     type='xs:string'     minOccurs='0' maxOccurs='1' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='BuyerType'>
        <xs:sequence>
          <xs:element name='reference'   type='ReferenceType' minOccurs='0' maxOccurs='1' />
          <xs:element name='name'        type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='description' type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'     type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='location'    type='AddressType'   minOccurs='0' maxOccurs='1' />
          <xs:element name='email'       type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='phone'       type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='taxID'       type='xs:string'     minOccurs='0' maxOccurs='1' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='ConsumerType'>
        <xs:sequence>
          <xs:element name='reference'   type='ReferenceType' minOccurs='0' maxOccurs='1' />
          <xs:element name='name'        type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='description' type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'     type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='location'    type='AddressType'   minOccurs='0' maxOccurs='1' />
          <xs:element name='contract'    type='ReferenceType' minOccurs='0' maxOccurs='1' />
          <xs:element name='email'       type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='phone'       type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='taxID'       type='xs:string'     minOccurs='0' maxOccurs='1' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='CurrencyType'>
        <xs:sequence>
          <xs:element name='code'      type='xs:string'  />
          <xs:element name='number'    type='xs:integer' />
          <xs:element name='precision' type='xs:integer' />
          <xs:element name='scale'     type='xs:integer' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='ItemType'>
        <xs:sequence>
          <xs:element name='reference'            type='ReferenceType'   minOccurs='0' maxOccurs='1' />
          <xs:element name='name'                 type='xs:string'       minOccurs='0' maxOccurs='1' />
          <xs:element name='description'          type='xs:string'       minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'              type='xs:string'       minOccurs='0' maxOccurs='1' />
          <xs:element name='location'             type='AddressType'     minOccurs='0' maxOccurs='1' />
          <xs:element name='amount'               type='MoneyType'       minOccurs='0' maxOccurs='1' />
          <xs:element name='amountSubjectToTerms' type='MoneyType'       minOccurs='0' maxOccurs='1' />
          <xs:element name='discount'             type='MoneyType'       minOccurs='0' maxOccurs='1' />
          <xs:element name='when'                 type='xs:dateTime'     minOccurs='0' maxOccurs='1' />
          <xs:element name='whenExpected'         type='xs:dateTime'     minOccurs='0' maxOccurs='1' />
          <xs:element name='freight'              type='MoneyType'       minOccurs='0' maxOccurs='1' />
          <xs:element name='lineNumber'           type='xs:integer'      minOccurs='0' maxOccurs='1' />
          <xs:element name='make'                 type='xs:string'       minOccurs='0' maxOccurs='1' />
          <xs:element name='model'                type='xs:string'       minOccurs='0' maxOccurs='1' />
          <xs:element name='quantity'             type='xs:float'        minOccurs='0' maxOccurs='1' />
          <xs:element name='serialNumber'         type='xs:string'       minOccurs='0' maxOccurs='1' />
          <xs:element name='tax'                  type='MoneyType'       minOccurs='0' maxOccurs='1' />
          <xs:element name='unitCost'             type='MoneyType'       minOccurs='0' maxOccurs='1' />
          <xs:element name='unitMeasure'          type='UnitMeasureType' minOccurs='0' maxOccurs='1' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='ItemsType'>
        <xs:sequence minOccurs='1' maxOccurs='5000'>
          <xs:element name='item' type='ItemType'/>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='ReferenceType'>
        <xs:sequence>
          <xs:element name='code'        type='xs:string' minOccurs='0' maxOccurs='1' />
          <xs:element name='name'        type='xs:string' minOccurs='0' maxOccurs='1' />
          <xs:element name='description' type='xs:string' minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'     type='xs:string' minOccurs='0' maxOccurs='1' />
          <xs:element name='type'                         minOccurs='0' maxOccurs='1'  >
            <xs:simpleType>
              <xs:restriction base='xs:string'>
                <xs:enumeration value='buyer'        />
                <xs:enumeration value='consumer'     />
                <xs:enumeration value='document'     />
                <xs:enumeration value='lineNumber'   />
                <xs:enumeration value='manufacturer' />
                <xs:enumeration value='seller'       />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='ShipToType'>
        <xs:sequence>
          <xs:element name='reference'   type='ReferenceType' minOccurs='0' maxOccurs='1' />
          <xs:element name='name'        type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='description' type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'     type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='location'    type='AddressType'   minOccurs='0' maxOccurs='1' />
          <xs:element name='email'       type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='phone'       type='xs:string'     minOccurs='0' maxOccurs='1' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='StockType'>
        <xs:sequence>
          <xs:element name='reference'    type='ReferenceType' minOccurs='0' maxOccurs='1' />
          <xs:element name='name'         type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='description'  type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='remarks'      type='xs:string'     minOccurs='0' maxOccurs='1' />
          <xs:element name='buyer'        type='BuyerType'     minOccurs='0' maxOccurs='1' />
          <xs:element name='consumer'     type='ConsumerType'  minOccurs='0' maxOccurs='1' />
          <xs:element name='shipTo'       type='ShipToType'    minOccurs='0' maxOccurs='1' />
          <xs:element name='when'         type='xs:dateTime'   minOccurs='0' maxOccurs='1' />
          <xs:element name='whenExpected' type='xs:dateTime'   minOccurs='0' maxOccurs='1' />
          <xs:element name='freight'      type='xs:decimal'    minOccurs='0' maxOccurs='1' />
          <xs:element name='currency'     type='CurrencyType'  minOccurs='0' maxOccurs='1' />
          <xs:element name='itemsCount'   type='xs:integer'    minOccurs='0' maxOccurs='1' />
          <xs:element name='items'        type='ItemsType'     minOccurs='1' maxOccurs='1' />
        </xs:sequence>
      </xs:complexType>

      <xs:complexType name='UnitMeasureType'>
        <xs:sequence>
          <xs:element name='name'        type='xs:string'  />
          <xs:element name='description' type='xs:string'  />
          <xs:element name='remarks'     type='xs:string'  />
          <xs:element name='code'        type='xs:string'  />
          <xs:element name='quantity'    type='xs:decimal' />
        </xs:sequence>
      </xs:complexType>

      <xs:simpleType name='MoneyType'>
        <xs:annotation>
          <xs:documentation>
            Every Product must have a unit cost that is equal to or greater than
            0 and must cost just under one trillion monetary units. Version 1.5.0
            assumes the monetary unit is US Dollars.
          </xs:documentation>
        </xs:annotation>
        <xs:restriction base='xs:decimal'>
          <xs:minInclusive value='0'/>
          <xs:maxInclusive value='999999999999.999999'/>
          <xs:fractionDigits value='6'/>
          <xs:totalDigits value='18'/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name='IDType'>
        <xs:annotation>
          <xs:documentation>
            Every Product must have at least one ID and that ID must uniquely locate
            only one product; a Product may have more than one ID but a ID must relate
            to only a single product.
          </xs:documentation>
        </xs:annotation>
        <xs:restriction base='xs:token'>
          <xs:minLength value='1'/>
          <xs:maxLength value='32'/>
        </xs:restriction>
      </xs:simpleType>

      <xs:simpleType name='QuantityType'>
        <xs:restriction base='xs:unsignedInt'/>
      </xs:simpleType>

    </xs:schema>

#+END_SRC

*** Version 2.0

**** TODO

** © 2018 ECi Software Solutions, Inc. All rights reserved.
